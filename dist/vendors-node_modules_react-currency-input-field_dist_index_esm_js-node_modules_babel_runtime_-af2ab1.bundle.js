"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrofl"] = self["webpackChunkrofl"] || []).push([["vendors-node_modules_react-currency-input-field_dist_index_esm_js-node_modules_babel_runtime_-af2ab1"],{

/***/ "./node_modules/react-currency-input-field/dist/index.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-currency-input-field/dist/index.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export formatValue */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || from);\n}\n/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\n\n\nvar escapeRegExp = function (stringToGoIntoTheRegex) {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n\nvar abbrMap = {\n  k: 1000,\n  m: 1000000,\n  b: 1000000000\n};\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\n\nvar parseAbbrValue = function (value, decimalSeparator) {\n  if (decimalSeparator === void 0) {\n    decimalSeparator = '.';\n  }\n\n  var reg = new RegExp(\"(\\\\d+(\" + escapeRegExp(decimalSeparator) + \"\\\\d*)?)([kmb])$\", 'i');\n  var match = value.match(reg);\n\n  if (match) {\n    var digits = match[1],\n        abbr = match[3];\n    var multiplier = abbrMap[abbr.toLowerCase()];\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\n\n\nvar removeSeparators = function (value, separator) {\n  if (separator === void 0) {\n    separator = ',';\n  }\n\n  var reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n/**\n * Remove invalid characters\n */\n\n\nvar removeInvalidChars = function (value, validChars) {\n  var chars = escapeRegExp(validChars.join(''));\n  var reg = new RegExp(\"[^\\\\d\" + chars + \"]\", 'gi');\n  return value.replace(reg, '');\n};\n/**\n * Remove prefix, separators and extra decimals from value\n */\n\n\nvar cleanValue = function (_a) {\n  var value = _a.value,\n      _b = _a.groupSeparator,\n      groupSeparator = _b === void 0 ? ',' : _b,\n      _c = _a.decimalSeparator,\n      decimalSeparator = _c === void 0 ? '.' : _c,\n      _d = _a.allowDecimals,\n      allowDecimals = _d === void 0 ? true : _d,\n      _e = _a.decimalsLimit,\n      decimalsLimit = _e === void 0 ? 2 : _e,\n      _f = _a.allowNegativeValue,\n      allowNegativeValue = _f === void 0 ? true : _f,\n      _g = _a.disableAbbreviations,\n      disableAbbreviations = _g === void 0 ? false : _g,\n      _h = _a.prefix,\n      prefix = _h === void 0 ? '' : _h,\n      _j = _a.transformRawValue,\n      transformRawValue = _j === void 0 ? function (rawValue) {\n    return rawValue;\n  } : _j;\n  var transformedValue = transformRawValue(value);\n\n  if (transformedValue === '-') {\n    return transformedValue;\n  }\n\n  var abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  var reg = new RegExp(\"((^|\\\\D)-\\\\d)|(-\" + escapeRegExp(prefix) + \")\");\n  var isNegative = reg.test(transformedValue); // Is there a digit before the prefix? eg. 1$\n\n  var _k = RegExp(\"(\\\\d+)-?\" + escapeRegExp(prefix)).exec(value) || [],\n      prefixWithValue = _k[0],\n      preValue = _k[1];\n\n  var withoutPrefix = prefix ? prefixWithValue ? transformedValue.replace(prefixWithValue, '').concat(preValue) : transformedValue.replace(prefix, '') : transformedValue;\n  var withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  var withoutInvalidChars = removeInvalidChars(withoutSeparators, __spreadArray([groupSeparator, decimalSeparator], abbreviations));\n  var valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some(function (letter) {\n      return letter === withoutInvalidChars.toLowerCase();\n    })) {\n      return '';\n    }\n\n    var parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  var includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    var _l = withoutInvalidChars.split(decimalSeparator),\n        int = _l[0],\n        decimals = _l[1];\n\n    var trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    var includeDecimals = allowDecimals ? \"\" + decimalSeparator + trimmedDecimals : '';\n    return \"\" + includeNegative + int + includeDecimals;\n  }\n\n  return \"\" + includeNegative + valueOnly;\n};\n\nvar fixedDecimalValue = function (value, decimalSeparator, fixedDecimalLength) {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      var _a = value.split(decimalSeparator),\n          int = _a[0],\n          decimals = _a[1];\n\n      if (decimals.length > fixedDecimalLength) {\n        return \"\" + int + decimalSeparator + decimals.slice(0, fixedDecimalLength);\n      }\n    }\n\n    var reg = value.length > fixedDecimalLength ? new RegExp(\"(\\\\d+)(\\\\d{\" + fixedDecimalLength + \"})\") : new RegExp(\"(\\\\d)(\\\\d+)\");\n    var match = value.match(reg);\n\n    if (match) {\n      var int = match[1],\n          decimals = match[2];\n      return \"\" + int + decimalSeparator + decimals;\n    }\n  }\n\n  return value;\n};\n\nvar getSuffix = function (value, _a) {\n  var _b = _a.groupSeparator,\n      groupSeparator = _b === void 0 ? ',' : _b,\n      _c = _a.decimalSeparator,\n      decimalSeparator = _c === void 0 ? '.' : _c;\n  var suffixReg = new RegExp(\"\\\\d([^\" + escapeRegExp(groupSeparator) + escapeRegExp(decimalSeparator) + \"0-9]+)\");\n  var suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n/**\n * Format value with decimal separator, group separator and prefix\n */\n\n\nvar formatValue = function (options) {\n  var _value = options.value,\n      decimalSeparator = options.decimalSeparator,\n      intlConfig = options.intlConfig,\n      decimalScale = options.decimalScale,\n      _a = options.prefix,\n      prefix = _a === void 0 ? '' : _a,\n      _b = options.suffix,\n      suffix = _b === void 0 ? '' : _b;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  var isNegative = new RegExp(\"^\\\\d?-\" + (prefix ? escapeRegExp(prefix) + \"?\" : '') + \"\\\\d\").test(_value);\n  var value = decimalSeparator !== '.' ? replaceDecimalSeparator(_value, decimalSeparator, isNegative) : _value;\n  var numberFormatter = intlConfig ? new Intl.NumberFormat(intlConfig.locale, intlConfig.currency ? {\n    style: 'currency',\n    currency: intlConfig.currency,\n    minimumFractionDigits: decimalScale || 0,\n    maximumFractionDigits: 20\n  } : undefined) : new Intl.NumberFormat(undefined, {\n    minimumFractionDigits: decimalScale || 0,\n    maximumFractionDigits: 20\n  });\n  var parts = numberFormatter.formatToParts(Number(value));\n  var formatted = replaceParts(parts, options); // Does intl formatting add a suffix?\n\n  var intlSuffix = getSuffix(formatted, __assign({}, options)); // Include decimal separator if user input ends with decimal separator\n\n  var includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  var _c = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [],\n      decimals = _c[1]; // Keep original decimal padding if no decimalScale\n\n\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(RegExp(\"(\\\\d+)(\" + escapeRegExp(decimalSeparator) + \")(\\\\d+)\", 'g'), \"$1$2\" + decimals);\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, \"\" + decimalSeparator + decimals + intlSuffix);\n      } else {\n        formatted = \"\" + formatted + decimalSeparator + decimals;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return \"\" + formatted + includeDecimalSeparator + suffix;\n  }\n\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + intlSuffix);\n  }\n\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + suffix);\n  }\n\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n/**\n * Before converting to Number, decimal separator has to be .\n */\n\n\nvar replaceDecimalSeparator = function (value, decimalSeparator, isNegative) {\n  var newValue = value;\n\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n\n    if (isNegative && decimalSeparator === '-') {\n      newValue = \"-\" + newValue.slice(1);\n    }\n  }\n\n  return newValue;\n};\n\nvar replaceParts = function (parts, _a) {\n  var prefix = _a.prefix,\n      groupSeparator = _a.groupSeparator,\n      decimalSeparator = _a.decimalSeparator,\n      decimalScale = _a.decimalScale,\n      _b = _a.disableGroupSeparators,\n      disableGroupSeparators = _b === void 0 ? false : _b;\n  return parts.reduce(function (prev, _a, i) {\n    var type = _a.type,\n        value = _a.value;\n\n    if (i === 0 && prefix) {\n      if (type === 'minusSign') {\n        return [value, prefix];\n      }\n\n      if (type === 'currency') {\n        return __spreadArray(__spreadArray([], prev), [prefix]);\n      }\n\n      return [prefix, value];\n    }\n\n    if (type === 'currency') {\n      return prefix ? prev : __spreadArray(__spreadArray([], prev), [value]);\n    }\n\n    if (type === 'group') {\n      return !disableGroupSeparators ? __spreadArray(__spreadArray([], prev), [groupSeparator !== undefined ? groupSeparator : value]) : prev;\n    }\n\n    if (type === 'decimal') {\n      if (decimalScale !== undefined && decimalScale === 0) {\n        return prev;\n      }\n\n      return __spreadArray(__spreadArray([], prev), [decimalSeparator !== undefined ? decimalSeparator : value]);\n    }\n\n    if (type === 'fraction') {\n      return __spreadArray(__spreadArray([], prev), [decimalScale !== undefined ? value.slice(0, decimalScale) : value]);\n    }\n\n    return __spreadArray(__spreadArray([], prev), [value]);\n  }, ['']).join('');\n};\n\nvar defaultConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n  prefix: '',\n  suffix: ''\n};\n/**\n * Get locale config from input or default\n */\n\nvar getLocaleConfig = function (intlConfig) {\n  var _a = intlConfig || {},\n      locale = _a.locale,\n      currency = _a.currency;\n\n  var numberFormatter = locale ? new Intl.NumberFormat(locale, currency ? {\n    currency: currency,\n    style: 'currency'\n  } : undefined) : new Intl.NumberFormat();\n  return numberFormatter.formatToParts(1000.1).reduce(function (prev, curr, i) {\n    if (curr.type === 'currency') {\n      if (i === 0) {\n        return __assign(__assign({}, prev), {\n          currencySymbol: curr.value,\n          prefix: curr.value\n        });\n      } else {\n        return __assign(__assign({}, prev), {\n          currencySymbol: curr.value,\n          suffix: curr.value\n        });\n      }\n    }\n\n    if (curr.type === 'group') {\n      return __assign(__assign({}, prev), {\n        groupSeparator: curr.value\n      });\n    }\n\n    if (curr.type === 'decimal') {\n      return __assign(__assign({}, prev), {\n        decimalSeparator: curr.value\n      });\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n\nvar isNumber = function (input) {\n  return RegExp(/\\d/, 'gi').test(input);\n};\n\nvar padTrimValue = function (value, decimalSeparator, decimalScale) {\n  if (decimalSeparator === void 0) {\n    decimalSeparator = '.';\n  }\n\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  var _a = value.split(decimalSeparator),\n      int = _a[0],\n      decimals = _a[1];\n\n  if (decimalScale === 0) {\n    return int;\n  }\n\n  var newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return \"\" + int + decimalSeparator + newValue;\n};\n/**\n * Based on the last key stroke and the cursor position, update the value\n * and reposition the cursor to the right place\n */\n\n\nvar repositionCursor = function (_a) {\n  var selectionStart = _a.selectionStart,\n      value = _a.value,\n      lastKeyStroke = _a.lastKeyStroke,\n      stateValue = _a.stateValue,\n      groupSeparator = _a.groupSeparator;\n  var cursorPosition = selectionStart;\n  var modifiedValue = value;\n\n  if (stateValue && cursorPosition) {\n    var splitValue = value.split(''); // if cursor is to right of groupSeparator and backspace pressed, delete the character to the left of the separator and reposition the cursor\n\n    if (lastKeyStroke === 'Backspace' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition - 1, 1);\n      cursorPosition -= 1;\n    } // if cursor is to left of groupSeparator and delete pressed, delete the character to the right of the separator and reposition the cursor\n\n\n    if (lastKeyStroke === 'Delete' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition, 1);\n      cursorPosition += 1;\n    }\n\n    modifiedValue = splitValue.join('');\n    return {\n      modifiedValue: modifiedValue,\n      cursorPosition: cursorPosition\n    };\n  }\n\n  return {\n    modifiedValue: modifiedValue,\n    cursorPosition: selectionStart\n  };\n};\n\nvar CurrencyInput = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n  var _b = _a.allowDecimals,\n      allowDecimals = _b === void 0 ? true : _b,\n      _c = _a.allowNegativeValue,\n      allowNegativeValue = _c === void 0 ? true : _c,\n      id = _a.id,\n      name = _a.name,\n      className = _a.className,\n      customInput = _a.customInput,\n      decimalsLimit = _a.decimalsLimit,\n      defaultValue = _a.defaultValue,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      userMaxLength = _a.maxLength,\n      userValue = _a.value,\n      onValueChange = _a.onValueChange,\n      fixedDecimalLength = _a.fixedDecimalLength,\n      placeholder = _a.placeholder,\n      decimalScale = _a.decimalScale,\n      prefix = _a.prefix,\n      suffix = _a.suffix,\n      intlConfig = _a.intlConfig,\n      step = _a.step,\n      min = _a.min,\n      max = _a.max,\n      _e = _a.disableGroupSeparators,\n      disableGroupSeparators = _e === void 0 ? false : _e,\n      _f = _a.disableAbbreviations,\n      disableAbbreviations = _f === void 0 ? false : _f,\n      _decimalSeparator = _a.decimalSeparator,\n      _groupSeparator = _a.groupSeparator,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      transformRawValue = _a.transformRawValue,\n      props = __rest(_a, [\"allowDecimals\", \"allowNegativeValue\", \"id\", \"name\", \"className\", \"customInput\", \"decimalsLimit\", \"defaultValue\", \"disabled\", \"maxLength\", \"value\", \"onValueChange\", \"fixedDecimalLength\", \"placeholder\", \"decimalScale\", \"prefix\", \"suffix\", \"intlConfig\", \"step\", \"min\", \"max\", \"disableGroupSeparators\", \"disableAbbreviations\", \"decimalSeparator\", \"groupSeparator\", \"onChange\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onKeyUp\", \"transformRawValue\"]);\n\n  if (_decimalSeparator && isNumber(_decimalSeparator)) {\n    throw new Error('decimalSeparator cannot be a number');\n  }\n\n  if (_groupSeparator && isNumber(_groupSeparator)) {\n    throw new Error('groupSeparator cannot be a number');\n  }\n\n  var localeConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return getLocaleConfig(intlConfig);\n  }, [intlConfig]);\n  var decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n  var groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n  if (decimalSeparator && groupSeparator && decimalSeparator === groupSeparator && disableGroupSeparators === false) {\n    throw new Error('decimalSeparator cannot be the same as groupSeparator');\n  }\n\n  var formatValueOptions = {\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    disableGroupSeparators: disableGroupSeparators,\n    intlConfig: intlConfig,\n    prefix: prefix || localeConfig.prefix,\n    suffix: suffix\n  };\n  var cleanValueOptions = {\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    allowDecimals: allowDecimals,\n    decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n    allowNegativeValue: allowNegativeValue,\n    disableAbbreviations: disableAbbreviations,\n    prefix: prefix || localeConfig.prefix,\n    transformRawValue: transformRawValue\n  };\n  var formattedStateValue = defaultValue !== undefined && defaultValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n    decimalScale: decimalScale,\n    value: String(defaultValue)\n  })) : userValue !== undefined && userValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n    decimalScale: decimalScale,\n    value: String(userValue)\n  })) : '';\n\n  var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(formattedStateValue),\n      stateValue = _g[0],\n      setStateValue = _g[1];\n\n  var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\n      dirty = _h[0],\n      setDirty = _h[1];\n\n  var _j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0),\n      cursor = _j[0],\n      setCursor = _j[1];\n\n  var _k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0),\n      changeCount = _k[0],\n      setChangeCount = _k[1];\n\n  var _l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n      lastKeyStroke = _l[0],\n      setLastKeyStroke = _l[1];\n\n  var inputRef = ref || (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  /**\n   * Process change in value\n   */\n\n  var processChange = function (value, selectionStart) {\n    setDirty(true);\n\n    var _a = repositionCursor({\n      selectionStart: selectionStart,\n      value: value,\n      lastKeyStroke: lastKeyStroke,\n      stateValue: stateValue,\n      groupSeparator: groupSeparator\n    }),\n        modifiedValue = _a.modifiedValue,\n        cursorPosition = _a.cursorPosition;\n\n    var stringValue = cleanValue(__assign({\n      value: modifiedValue\n    }, cleanValueOptions));\n\n    if (userMaxLength && stringValue.replace(/-/g, '').length > userMaxLength) {\n      return;\n    }\n\n    if (stringValue === '' || stringValue === '-' || stringValue === decimalSeparator) {\n      onValueChange && onValueChange(undefined, name, {\n        float: null,\n        formatted: '',\n        value: ''\n      });\n      setStateValue(stringValue);\n      return;\n    }\n\n    var numberValue = parseFloat(stringValue.replace(decimalSeparator, '.'));\n    var formattedValue = formatValue(__assign({\n      value: stringValue\n    }, formatValueOptions));\n\n    if (cursorPosition !== undefined && cursorPosition !== null) {\n      // Prevent cursor jumping\n      var newCursor = cursorPosition + (formattedValue.length - value.length);\n      newCursor = newCursor <= 0 ? prefix ? prefix.length : 0 : newCursor;\n      setCursor(newCursor);\n      setChangeCount(changeCount + 1);\n    }\n\n    setStateValue(formattedValue);\n\n    if (onValueChange) {\n      var values = {\n        float: numberValue,\n        formatted: formattedValue,\n        value: stringValue\n      };\n      onValueChange(stringValue, name, values);\n    }\n  };\n  /**\n   * Handle change event\n   */\n\n\n  var handleOnChange = function (event) {\n    var _a = event.target,\n        value = _a.value,\n        selectionStart = _a.selectionStart;\n    processChange(value, selectionStart);\n    onChange && onChange(event);\n  };\n  /**\n   * Handle focus event\n   */\n\n\n  var handleOnFocus = function (event) {\n    onFocus && onFocus(event);\n    return stateValue ? stateValue.length : 0;\n  };\n  /**\n   * Handle blur event\n   *\n   * Format value by padding/trimming decimals if required by\n   */\n\n\n  var handleOnBlur = function (event) {\n    var value = event.target.value;\n    var valueOnly = cleanValue(__assign({\n      value: value\n    }, cleanValueOptions));\n\n    if (valueOnly === '-' || !valueOnly) {\n      setStateValue('');\n      onBlur && onBlur(event);\n      return;\n    }\n\n    var fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n    var newValue = padTrimValue(fixedDecimals, decimalSeparator, decimalScale !== undefined ? decimalScale : fixedDecimalLength);\n    var numberValue = parseFloat(newValue.replace(decimalSeparator, '.'));\n    var formattedValue = formatValue(__assign(__assign({}, formatValueOptions), {\n      value: newValue\n    }));\n\n    if (onValueChange) {\n      onValueChange(newValue, name, {\n        float: numberValue,\n        formatted: formattedValue,\n        value: newValue\n      });\n    }\n\n    setStateValue(formattedValue);\n    onBlur && onBlur(event);\n  };\n  /**\n   * Handle key down event\n   *\n   * Increase or decrease value by step\n   */\n\n\n  var handleOnKeyDown = function (event) {\n    var key = event.key;\n    setLastKeyStroke(key);\n\n    if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n      event.preventDefault();\n      setCursor(stateValue.length);\n      var currentValue = parseFloat(userValue !== undefined && userValue !== null ? String(userValue).replace(decimalSeparator, '.') : cleanValue(__assign({\n        value: stateValue\n      }, cleanValueOptions))) || 0;\n      var newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n\n      if (min !== undefined && newValue < min) {\n        return;\n      }\n\n      if (max !== undefined && newValue > max) {\n        return;\n      }\n\n      var fixedLength = String(step).includes('.') ? Number(String(step).split('.')[1].length) : undefined;\n      processChange(String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace('.', decimalSeparator));\n    }\n\n    onKeyDown && onKeyDown(event);\n  };\n  /**\n   * Handle key up event\n   *\n   * Move cursor if there is a suffix to prevent user typing past suffix\n   */\n\n\n  var handleOnKeyUp = function (event) {\n    var key = event.key,\n        selectionStart = event.currentTarget.selectionStart;\n\n    if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n      var suffix_1 = getSuffix(stateValue, {\n        groupSeparator: groupSeparator,\n        decimalSeparator: decimalSeparator\n      });\n\n      if (suffix_1 && selectionStart && selectionStart > stateValue.length - suffix_1.length) {\n        /* istanbul ignore else */\n        if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n          var newCursor = stateValue.length - suffix_1.length;\n          inputRef.current.setSelectionRange(newCursor, newCursor);\n        }\n      }\n    }\n\n    onKeyUp && onKeyUp(event);\n  };\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    // prevent cursor jumping if editing value\n    if (dirty && stateValue !== '-' && inputRef && typeof inputRef === 'object' && inputRef.current) {\n      inputRef.current.setSelectionRange(cursor, cursor);\n    }\n  }, [stateValue, cursor, inputRef, dirty, changeCount]);\n  /**\n   * If user has only entered \"-\" or decimal separator,\n   * keep the char to allow them to enter next value\n   */\n\n  var getRenderValue = function () {\n    if (userValue !== undefined && userValue !== null && stateValue !== '-' && (!decimalSeparator || stateValue !== decimalSeparator)) {\n      return formatValue(__assign(__assign({}, formatValueOptions), {\n        decimalScale: dirty ? undefined : decimalScale,\n        value: String(userValue)\n      }));\n    }\n\n    return stateValue;\n  };\n\n  var inputProps = __assign({\n    type: 'text',\n    inputMode: 'decimal',\n    id: id,\n    name: name,\n    className: className,\n    onChange: handleOnChange,\n    onBlur: handleOnBlur,\n    onFocus: handleOnFocus,\n    onKeyDown: handleOnKeyDown,\n    onKeyUp: handleOnKeyUp,\n    placeholder: placeholder,\n    disabled: disabled,\n    value: getRenderValue(),\n    ref: inputRef\n  }, props);\n\n  if (customInput) {\n    var CustomInput = customInput;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomInput, __assign({}, inputProps));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", __assign({}, inputProps));\n});\nCurrencyInput.displayName = 'CurrencyInput';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CurrencyInput);\n\n\n//# sourceURL=webpack://rofl/./node_modules/react-currency-input-field/dist/index.esm.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _arrayWithoutHoles)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr);\n}\n\n//# sourceURL=webpack://rofl/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _iterableToArray)\n/* harmony export */ });\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n//# sourceURL=webpack://rofl/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _nonIterableSpread)\n/* harmony export */ });\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n//# sourceURL=webpack://rofl/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _toConsumableArray)\n/* harmony export */ });\n/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\");\n/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\");\n/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\");\n/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ \"./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\");\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}\n\n//# sourceURL=webpack://rofl/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js?");

/***/ })

}]);